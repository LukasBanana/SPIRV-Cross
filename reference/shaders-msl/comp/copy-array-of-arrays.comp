#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

struct BUF
{
    int a;
    float b;
    float c;
};

constant unsafe_array<float,2> _16 = unsafe_array<float,2>({ 1.0, 2.0 });
constant unsafe_array<float,2> _19 = unsafe_array<float,2>({ 3.0, 4.0 });
constant unsafe_array<unsafe_array<float,2>,2> _20 = unsafe_array<unsafe_array<float,2>,2>({ unsafe_array<float,2>({ 1.0, 2.0 }), unsafe_array<float,2>({ 3.0, 4.0 }) });
constant unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2> _21 = unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2>({ unsafe_array<unsafe_array<float,2>,2>({ unsafe_array<float,2>({ 1.0, 2.0 }), unsafe_array<float,2>({ 3.0, 4.0 }) }), unsafe_array<unsafe_array<float,2>,2>({ unsafe_array<float,2>({ 1.0, 2.0 }), unsafe_array<float,2>({ 3.0, 4.0 }) }) });

kernel void main0(device BUF& o [[buffer(0)]])
{
    unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2> c;
    c = _21;
    o.a = int(c[1][1][1]);
    unsafe_array<float,2> _43 = { o.b, o.c };
    unsafe_array<float,2> _48 = { o.b, o.b };
    unsafe_array<unsafe_array<float,2>,2> _49 = { _43, _48 };
    unsafe_array<float,2> _54 = { o.c, o.c };
    unsafe_array<float,2> _59 = { o.c, o.b };
    unsafe_array<unsafe_array<float,2>,2> _60 = { _54, _59 };
    unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2> _61 = { _49, _60 };
    unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2> d;
    d = _61;
    unsafe_array<unsafe_array<unsafe_array<float,2>,2>,2> e;
    e = d;
    o.b = e[1][0][1];
}

