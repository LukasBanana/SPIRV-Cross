#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(4u, 1u, 1u);

static inline __attribute__((always_inline))
void barrier_shared()
{
    threadgroup_barrier(mem_flags::mem_threadgroup);
}

static inline __attribute__((always_inline))
void full_barrier()
{
    threadgroup_barrier(mem_flags::mem_device | mem_flags::mem_threadgroup | mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void image_barrier()
{
    threadgroup_barrier(mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void buffer_barrier()
{
    threadgroup_barrier(mem_flags::mem_device);
}

static inline __attribute__((always_inline))
void group_barrier()
{
    threadgroup_barrier(mem_flags::mem_device | mem_flags::mem_threadgroup | mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void barrier_shared_exec()
{
    threadgroup_barrier(mem_flags::mem_threadgroup);
}

static inline __attribute__((always_inline))
void full_barrier_exec()
{
    threadgroup_barrier(mem_flags::mem_device | mem_flags::mem_threadgroup | mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void image_barrier_exec()
{
    threadgroup_barrier(mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void buffer_barrier_exec()
{
    threadgroup_barrier(mem_flags::mem_device);
}

static inline __attribute__((always_inline))
void group_barrier_exec()
{
    threadgroup_barrier(mem_flags::mem_device | mem_flags::mem_threadgroup | mem_flags::mem_texture);
}

static inline __attribute__((always_inline))
void exec_barrier()
{
    threadgroup_barrier(mem_flags::mem_threadgroup);
}

kernel void main0()
{
    barrier_shared();
    full_barrier();
    image_barrier();
    buffer_barrier();
    group_barrier();
    barrier_shared_exec();
    full_barrier_exec();
    image_barrier_exec();
    buffer_barrier_exec();
    group_barrier_exec();
    exec_barrier();
}

