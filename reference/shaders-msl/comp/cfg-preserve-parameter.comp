#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

static inline __attribute__((always_inline))
void out_test_0(thread const int& cond, thread int& i)
{
    if (cond == 0)
    {
        i = 40;
    }
    else
    {
        i = 60;
    }
}

static inline __attribute__((always_inline))
void out_test_1(thread const int& cond, thread int& i)
{
    switch (cond)
    {
        case 40:
        {
            i = 40;
            break;
        }
        default:
        {
            i = 70;
            break;
        }
    }
}

static inline __attribute__((always_inline))
void inout_test_0(thread const int& cond, thread int& i)
{
    if (cond == 0)
    {
        i = 40;
    }
}

static inline __attribute__((always_inline))
void inout_test_1(thread const int& cond, thread int& i)
{
    switch (cond)
    {
        case 40:
        {
            i = 40;
            break;
        }
    }
}

kernel void main0()
{
    int cond = 40;
    int i = 50;
    int param = cond;
    int param_1 = i;
    out_test_0(param, param_1);
    i = param_1;
    int param_2 = cond;
    int param_3 = i;
    out_test_1(param_2, param_3);
    i = param_3;
    int param_4 = cond;
    int param_5 = i;
    inout_test_0(param_4, param_5);
    i = param_5;
    int param_6 = cond;
    int param_7 = i;
    inout_test_1(param_6, param_7);
    i = param_7;
}

