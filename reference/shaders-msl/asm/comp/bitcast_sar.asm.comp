#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

struct _3
{
    int4 _m0;
    uint4 _m1;
};

struct _4
{
    uint4 _m0;
    int4 _m1;
};

kernel void main0(device _3& _5 [[buffer(0)]], device _4& _6 [[buffer(1)]])
{
    int4 _22 = _5._m0;
    uint4 _23 = _5._m1;
    _6._m0 = uint4(int4(_23) >> _22);
    _6._m0 = uint4(_22 >> int4(_23));
    _6._m0 = uint4(int4(_23) >> int4(_23));
    _6._m0 = uint4(_22 >> _22);
    _6._m1 = int4(_23) >> int4(_23);
    _6._m1 = _22 >> _22;
    _6._m1 = int4(_23) >> _22;
    _6._m1 = _22 >> int4(_23);
}

