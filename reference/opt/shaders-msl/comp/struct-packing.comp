#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

typedef float3x2 packed_float2x3;

struct S0
{
    unsafe_array<float2,1> a;
    float b;
};

struct S1
{
    packed_float3 a;
    float b;
};

struct S2
{
    unsafe_array<float3,1> a;
    float b;
};

struct S3
{
    float2 a;
    float b;
};

struct S4
{
    float2 c;
};

struct Content
{
    unsafe_array<S0,1> m0s;
    unsafe_array<S1,1> m1s;
    unsafe_array<S2,1> m2s;
    S0 m0;
    S1 m1;
    S2 m2;
    S3 m3;
    float m4;
    unsafe_array<S4,8> m3s;
};

struct SSBO1
{
    Content content;
    unsafe_array<Content,2> content1;
    Content content2;
    float2x2 m0;
    float2x2 m1;
    unsafe_array<float2x3,4> m2;
    float3x2 m3;
    float2x2 m4;
    unsafe_array<float2x2,9> m5;
    unsafe_array<unsafe_array<packed_float2x3,4>,2> m6;
    char _m10_pad[8];
    float3x2 m7;
    char _m11_pad[8];
    unsafe_array<float,1> array;
};

struct S0_1
{
    unsafe_array<float4,1> a;
    float b;
};

struct S1_1
{
    packed_float3 a;
    float b;
};

struct S2_1
{
    unsafe_array<float3,1> a;
    float b;
};

struct S3_1
{
    float2 a;
    float b;
};

struct S4_1
{
    float2 c;
};

struct Content_1
{
    unsafe_array<S0_1,1> m0s;
    unsafe_array<S1_1,1> m1s;
    unsafe_array<S2_1,1> m2s;
    S0_1 m0;
    S1_1 m1;
    S2_1 m2;
    S3_1 m3;
    float m4;
    char _m8_pad[12];
    /* FIXME: A padded struct is needed here. If you see this message, file a bug! */ unsafe_array<S4_1,8> m3s;
};

struct SSBO0
{
    Content_1 content;
    unsafe_array<Content_1,2> content1;
    Content_1 content2;
    unsafe_array<float4,1> array;
};

kernel void main0(device SSBO0& ssbo_140 [[buffer(0)]], device SSBO1& ssbo_430 [[buffer(1)]])
{
    Content_1 _60 = ssbo_140.content;
    ssbo_430.content.m0s[0].a[0] = _60.m0s[0].a[0].xy;
    ssbo_430.content.m0s[0].b = _60.m0s[0].b;
    ssbo_430.content.m1s[0].a = float3(_60.m1s[0].a);
    ssbo_430.content.m1s[0].b = _60.m1s[0].b;
    ssbo_430.content.m2s[0].a[0] = _60.m2s[0].a[0];
    ssbo_430.content.m2s[0].b = _60.m2s[0].b;
    ssbo_430.content.m0.a[0] = _60.m0.a[0].xy;
    ssbo_430.content.m0.b = _60.m0.b;
    ssbo_430.content.m1.a = float3(_60.m1.a);
    ssbo_430.content.m1.b = _60.m1.b;
    ssbo_430.content.m2.a[0] = _60.m2.a[0];
    ssbo_430.content.m2.b = _60.m2.b;
    ssbo_430.content.m3.a = _60.m3.a;
    ssbo_430.content.m3.b = _60.m3.b;
    ssbo_430.content.m4 = _60.m4;
    ssbo_430.content.m3s[0].c = _60.m3s[0].c;
    ssbo_430.content.m3s[1].c = _60.m3s[1].c;
    ssbo_430.content.m3s[2].c = _60.m3s[2].c;
    ssbo_430.content.m3s[3].c = _60.m3s[3].c;
    ssbo_430.content.m3s[4].c = _60.m3s[4].c;
    ssbo_430.content.m3s[5].c = _60.m3s[5].c;
    ssbo_430.content.m3s[6].c = _60.m3s[6].c;
    ssbo_430.content.m3s[7].c = _60.m3s[7].c;
    ssbo_430.content.m1.a = ssbo_430.content.m3.a * ssbo_430.m6[1][1];
}

