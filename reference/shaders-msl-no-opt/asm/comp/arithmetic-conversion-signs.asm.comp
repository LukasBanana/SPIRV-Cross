#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

struct SSBO
{
    int s32;
    uint u32;
    short s16;
    ushort u16;
    float f32;
};

kernel void main0(device SSBO& _4 [[buffer(0)]])
{
    int _29 = _4.s32;
    uint _30 = _4.u32;
    short _31 = _4.s16;
    ushort _32 = _4.u16;
    float _33 = _4.f32;
    _4.s32 = int(_31);
    _4.u32 = uint(_31);
    _4.s32 = int(short(_32));
    _4.u32 = uint(short(_32));
    _4.u32 = uint(ushort(_31));
    _4.u32 = uint(_32);
    _4.s16 = short(_29);
    _4.u16 = ushort(_29);
    _4.s16 = short(_30);
    _4.u16 = ushort(_30);
    _4.u16 = ushort(_29);
    _4.u16 = ushort(_30);
    _4.f32 = float(_31);
    _4.f32 = float(short(_32));
    _4.f32 = float(ushort(_31));
    _4.f32 = float(_32);
    _4.s16 = short(_33);
    _4.u16 = ushort(short(_33));
    _4.u16 = ushort(_33);
}

